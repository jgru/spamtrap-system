---
  ingesting: # Necessary component
    type: rabbitmq
    # Rabbitmq config
    rabbitmq:
      ident: reader
      secret: secret
      host: 0.0.0.0
      port: 5671
      vhost: "/"
      exchange: spam
      routing_key: "#"
      tls: True
      # Set this to false if using self-signed certs
      check_cert: False

    # Hpfeeds config (in case `type: hpfeeds' is set)
    hpfeeds:
      ident: reader
      secret: secret
      host: 0.0.0.0 # Or use the Docker container's host name
      port: 10000
      tls: False

      channels:
        - spam.mails

  persistance:
    mongodb: # Necessary component
      host: 0.0.0.0 # Or use the Docker container's host name
      port: 27017
      database_name: malspam
      indexttl: 10

    dumping: # Optional
      dump_files: True
      dump_path: ./dump # relative path to run_backend.py

  peripherals:

    # Reporting and possibly enriching
    sandbox:
      enabled: true
      enrich: true
      # type: cuckoo
      # host: 1.2.3.4  # FIXME: Change this to the IP-address of your sandbox
      # port: 8090
      # timeout: 30
      # whitelist_ips: ./config/whitelists/ip_whitelist.txt # relative path to run_backend.py
      # whitelist_domains: ./config/whitelists/windows_services.txt # relative path to run_backend.py
      type: hatching
      host: api.tria.ge
      token: <API-key>
      timeout: 30

    thug:
      enabled: true
      enrich: true
      # Options for distributed thug
      # which communicates via a RabbitMQ as well
      host: 0.0.0.0
      port: 5672
      vhost: "/"
      job_queue: rpc.server.queue
      user: guest
      secret: guest
      # More specific options
      timeout: 8
      referrer: https://www.google.com
      whitelist_urls: ./config/whitelists/url_whitelist.txt # relative path to run_backend.py

    # Reporting only
    misp:
      enabled: false
      key: <API-key>
      url: 0.0.0.0 # Or use the Docker container's host name
      # Define what to report
      relevant_documents: Email,File,Url,NetworkEntity

    elasticsearch:
      enabled: true
      host: 0.0.0.0 # Or use the Docker container's host name
      port: 9200
      index: malspam
      # Define what to report
      relevant_documents: Email,File,Url,NetworkEntity

    karton:
      enabled: false
      ini_file: ./config/karton.ini

  logging:
    enabled: True
    file: backend.log

  geo_db: ./GeoLite2-City.mmdb  # relative path to run_backend.py
