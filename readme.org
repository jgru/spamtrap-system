* spamtrap-system
This repository houses a collection of tools to build and run a
distributed spamtrap system that is comprised of IMAP- as well as
SMTP-collectors, a fake open SMTP relay and an analysis backend.

The collectors constitute the spamtraps and transfer the collected
spam via the publish-subscribe-protocol [[https://hpfeeds.org/][Hpfeeds]] to the backend. There
the (mal)spam will be automatically decomposed and analyzed with the
help of [[https://github.com/cuckoosandbox/cuckoo][Cuckoo]] and [[https://github.com/buffer/thug][Thug]]. The ultimate goal of the system is to gather
actionable threat intelligence regarding the infrastructure used by
malware, which is accomplished by evaluating the results given by the
sandbox and utilizing [[https://github.com/JPCERTCC/MalConfScan][MalConfScan]]. Results are persisted a [[https://www.mongodb.com/][MongoDB]]
instance. In order to assist analyses, relevant results are pushed
into an [[https://www.elastic.co/elasticsearch/][Elasticsearch]] instance with a [[https://www.elastic.co/kibana][Kibana]] frontend [fn:1], where
threat intel analyst could query the collection.

This project aims to be modular to a large extent, so that further
collectors, e.g. server honeypots, or reporting components could be
added easily.

** Motivation
At the time (mid 2022) of writing *malspam* is the prevalent method of
spreading malware. Malspam is defined as follows:

"Malspam, short for malware spam or malicious spam, is spam email that
delivers malware. While regular spam is simply any unsolicited email,
malspam contains infected attachments, phishing messages, or malicious
URLs. It can also deliver a myriad of malware types [...]." [fn:2]

*Malspam* can be considered one of the biggest cyberthreats. In order
to be able to acquire and disseminate threat intelligence enabling
defenders to mitigate the risks, it is important to collect malspam,
form IoCs and map network infrastructure used by malware. The
developed spamtrap system helps to streamline the whole process while,
it relies on distributed components and the renowned open source tools
[[https://github.com/cuckoosandbox/cuckoo][Cuckoo]] and [[https://github.com/buffer/thug][Thug]].

To the best of our knowledge, there is no pipeline based on
open-source tools, which is able to analyze malspam samples and
retrieve information about the network infrastructure (more
specifically malware distribution sites and command-and-control
servers) from end-to-end in an automated manner.

** Architecture

*** Overview
The following figure illustrates the high-level architecture of the
system and describes how distributed components interact.

#+html: <p align="center"><img width="800" src="docs/img/spamtrap-architecture.svg"></p>

Mail is collected by different collectors which can be deployed in the
cloud without much effort. They sent collected messages to a message
broker by utilizing the publich-subscribe protocol [[Https://hpfeeds.org/wire-protocol][Hpfeeds]]. The
backend acts as a subscriber of the Hpfeeds channel in question, in
which the spam mails are pushed into. Then, it tokenizes received
mails, extracts attachments and downloads files from the URLs, which
are mentioned inside the mail body, with the help of the honeyclient
[[https://github.com/buffer/thug][Thug]] (its Python API to be more specific). Archives are extracted,
even when locked with a password (if it is mentioned in the mail
body), and executable files are then submitted into the open source
malware analysis sandbox [[https://github.com/cuckoosandbox/cuckoo][Cuckoo]] by using its REST API.

*** Results
Results, like the identified spam SMTP servers, malware distribution
sites and command-and-control servers will be extracted and stored in
the document store [[https://www.mongodb.com/][MongoDB]]. The resuls can then be presented visually
with the help of [[https://www.elastic.co/elasticsearch/][Elasticsearch]] and [[https://www.elastic.co/kibana][Kibana]].

The screenshot below illustrates a Kibana dashboard created by
collected malspam and the extracted intelligence. Spam senders,
misused MTAs, malware distribution sites as well as C&C-servers are
shown and presented as actionable threat intelligence.

#+html: <p align="center"><img width="1000" src="docs/img/kibana_dashboard_1.png"></p>

*** Components
As already mentioned above, the distributed system consists of several
components. Their code is stored in the respective subdirectories,
where their concept, usage and other details are described in the
=readme.org=-files placed in there.

The project is structured as follows:
#+begin_src
.
├── backend # Contains the processing backend
│   ├── config
│   └── processing_backend
├── collectors  # Collector code
│   ├── fosr-collector # Fake open relay
│   ├── imap-collector # IMAP retrieval
│   └── smtp-collector # Fake SMTP destination server
├── docs
│   └── img
└── periphery # Contains the peripheral components
    ├── elasticstack # Reporting/presentation
    ├── hpfeed-broker-tls # TLS-protected msg broker
    └── mongodb  # Persistence

#+end_src

** Usage
Please refer to the readme-files of the a/m components to find
detailed instructions on installation and usage.

The IMAP-collector and the fake open SMTP relay can be used right off
the deck after having installed the requirements listed in the
respective =requirements.txt=-file. To run the SMTP fake destination
SMTP server, the TLS-protected Hpfeeds-broker, the Elastic stack or
the MongoDB just use the ~docker-compose~-files within
[[file:periphery/][periphery-directory]].

The installation of Cuckoo is a bit more involved and time consuming.
Therefore, an [[https://www.ansible.com/][Ansible]] role is provided to ease the of this malware
analysis sandbox. See
https://github.com/jgru/ansible-cuckoo-virtualbox for further
information.

** References

[fn:1] Using version 7.10, which is licensed under Apache 2.0.

[fn:2] See https://blog.malwarebytes.com/glossary/malspam/, accessed 12/07/2022.

[fn:3] Cf. Verizon (2019). Data Breach Investigations Report 2019.
       Technical report. Verizon Communications Inc. URL :
       https://enterprise.verizon.com/resources/reports/2019-data-breach-investigations-report.pdf
